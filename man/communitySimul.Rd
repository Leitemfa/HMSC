% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/communitySimul.R
\name{communitySimul}
\alias{communitySimul}
\title{Simulate a species community}
\usage{
communitySimul(X = NULL, Tr = NULL, Phylo = NULL, Random = NULL,
  Auto = NULL, nsp = NULL, family = "probit", paramDist = NULL,
  paramX = NULL, paramTr = NULL, paramPhylo = NULL, meansParamX = NULL,
  varX = NULL, latent = NULL, paramLatent = NULL, spCor = NULL,
  shrinkLocal = NULL, paramShrinkGlobal = NULL, latentAuto = NULL,
  paramLatentAuto = NULL, paramAuto = NULL, shrinkLocalAuto = NULL,
  paramShrinkGlobalAuto = NULL)
}
\arguments{
\item{X}{Matrix of descriptors defining the species. Rows are sites and the columns are descriptors.}

\item{Tr}{Matrix defining species traits. Rows are traits and columns are species.}

\item{Phylo}{Square correlation matrix defining the phylogenetic relationship among pairs of species.}

\item{Random}{A factor or a data.frame that includes many factors defining a random effect on the sites.}

\item{Auto}{A data.frame that includes a factor as its first column and spatial/temporal coordinates for the other columns. If multiple autocorrelated random effects are considered a list is given where each element of the list is a data.frame as defined previously.}

\item{nsp}{Numeric. Number of species to be simulated in the community.}

\item{family}{A character string defining the error distribution and link function to be used when simulating the data. Only "gaussian","probit", "poisson" and "nbinomial" have been implemented so far.}

\item{paramDist}{Numeric. A value defining the standard deviation (if \code{family="gaussian"}) or the dispersal (if  \code{family="nbinomial"}) matrix of model parameters defining how each species (rows) is characterized by each descriptors (columns).}

\item{paramX}{A matrix of model parameters defining how each species (rows) is characterized by each descriptors (columns).}

\item{paramTr}{A matrix of model parameters defining how each descriptors (rows) characterizes species traits (columns).}

\item{paramPhylo}{A numeric value defining the importance of phylogeny in structuring species relationship with the environment.}

\item{meansParamX}{Vector of means used to generate the model parameters. (See details)}

\item{varX}{Covariance matrix used to generate the model parameters. (See details)}

\item{latent}{A list of matrices where each of set defines a random effect on the sites (rows) characterized by different latent variables (columns).}

\item{paramLatent}{A list of matrices where each of set defines the parameters of a random effect on the sites (rows) characterized by different latent variables (columns).}

\item{spCor}{A species by species correlation matrix defining the correlations among species in the community.}

\item{shrinkLocal}{A list of matrices defining local shrinkage parameters for each parameter of the latent variables associated to each random effect.}

\item{paramShrinkGlobal}{A list of vectors defining the independent global shrinkage parameters for each latent variable.}

\item{latentAuto}{A list of matrices where each of set defines an autocorrelated random effect on the sites (rows) characterized by different autocorrelated latent variables (columns).}

\item{paramLatentAuto}{A list of matrices where each of set defines the parameters of an autocorrelated random effect on the sites (rows) characterized by different autocorrelated latent variables (columns).}

\item{paramAuto}{A list of numerical values defining the importance of the autocorrelation for each autocorrelated latent variables \code{latentAuto}. These values can range from 0 to the largest distance between samples in the autocorrelated level. (See details)}

\item{shrinkLocalAuto}{A list of matrices defining local shrinkage parameters for each parameter of the autocorrelated latent variables associated to each autocorrelated random effect.}

\item{paramShrinkGlobalAuto}{A list of vectors defining the independent global shrinkage parameters for each autocorrelated latent variable.}
}
\value{
The functions \code{communitySimulH} and \code{communitySimulHT} return an object of class \code{communitySimul} with the following components:
\item{data}{an object of class HMSCdata}
\item{param}{an object of class HMSCparam}
\item{sd}{The standard deviation used to simulate normally distributed data. This value is the same as paramDist and appears only when the data is simulated using \code{gaussian}}
\item{size}{The dispersal parameter used when simulating data distributed following a negative binomial distribution. This value is the same as paramDist and appears only when the data is simulated using \code{nbinomial}}
\item{probMat}{A matrix that defines the occurrence probability of each species for each site.}
}
\description{
Simulates a species community assuming a linear model with the proposed descriptors, the species traits and one or more random effects.
}
\details{
This function can be used to simulate a community from randomly proposed or fixed parameters.

The descriptors in \code{X} are used without any modifications (or additions) to simulate the species community. As such, a column of 1 should be included in \code{X} for the model used to construct the community to include an intercept.

The values in \code{meansParamX} and \code{varX} are used as parameter of a multivariate normal distribution to generate the model's parameters (\code{\link[MASS]{mvrnorm}} is used in the function). When \code{paramX} is set to \code{NULL}, the \code{meansParamX} and the \code{varX} will be randomly generated if they are also set to \code{NULL}. When values are given to \code{paramX} the values of the \code{meansParamX} and the \code{varX} are not used and if either is set to \code{NULL}, no data will be generated for either set of parameter. When generated, the values for \code{meansParamX} are randomly sampled from \code{\link{rnorm}} and the values for \code{varX} are randomly sampled from an inverse (\code{solve})  Wishart distribution (\code{\link{rWishart}}).

Note that \code{meansParamX} can be calculated directly by \code{Tr} with \code{paramTr}. As such, \code{meansParamX} is made available as an extension. If it is given to the function but \code{paramTr} is not, than \code{paramTr} is calculated from \code{meansParamX} and vice versa. If both \code{meansParamX} and \code{paramTr} are given to the function and there is a mismatch in the parameters calculated, \code{meansParamX} will take precedent.

All the parameters associated to the autocorrelated random effect (\code{Auto},\code{latentAuto},\code{paramLantentAuto} and \code{paramAuto}) use the distance between groups (levels of the factors in \code{Auto}) to define the parameters and latent variables. When multiple samples are within a group, the coordinates related to the different samples are averaged both calculating the distances between this group and other groups.

Currently, this function simulates four types of community:

\itemize{
	\item{\code{gaussian}}{ For normally distributed data.}
	\item{\code{probit}}{ For presence/absence of species using a probit link.}
	\item{\code{poisson}}{ For count data of species using a log link.}
	\item{\code{nbinomial}}{ For count data with many zeros.}
}
}
\examples{

### Construct some descriptors
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
### Simulate community from random parameters
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
desc <- cbind(1, scale(1:50), scale(1:50)^2)
traits <- rbind(1, 1:20/5)
random1 <- as.factor(1:50)
random2 <- as.factor(rep(letters[1:2], each = 25))
randEff <- data.frame(rand1 = random1, rand2 = random2)

### Simulate presence-absence community data
commDescTraitRandEffProbit <- communitySimul(X = desc, Tr = traits, 
												Random = randEff, nsp = 20)

#--------------------
### Fixing parameters
#--------------------
## ProbMat does not change
TrueParamX <- commDescTraitRandEffProbit$param$paramX
commParamX <- communitySimul(X = desc, paramX = TrueParamX)

### ProbMat changes
TrueParamTr <- commDescTraitRandEffProbit$param$paramTr
commParamTr <- communitySimul(X = desc, Tr = traits, paramTr = TrueParamTr)

### ProbMat changes
commParamLatent <- communitySimul(X = desc, Random = randEff, 
								   paramLatent = commDescTraitRandEffProbit$param$paramLatent, 
								   latent = commDescTraitRandEffProbit$param$latent)

### ProbMat changes
speciesCor <- cov2cor(solve(rWishart(1, 22, diag(20))[, , 1]))
commParamSpCor <- communitySimul(X = desc, spCor = speciesCor)

}
\author{
F. Guillaume Blanchet
}
\keyword{datagen}
\keyword{htest}
